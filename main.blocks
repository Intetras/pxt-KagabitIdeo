<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="^2^::G:B3FLMS51MQS5C" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="GrqqAt(FXn)rV:9lmNn7" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace kagabitideo {" line1="" line2="    export enum direction {" line3="        //% block=&quot;Forward&quot;" line4="        Forward = 1," line5="        //% block=&quot;Back&quot;" line6="        Back = -1," line7="        //% block=&quot;stop&quot;" line8="        Stop = 0" line9="    }" line10="" line11="    export enum dark_or_bright{" line12="        //% block=&quot;暗い&quot;" line13="        Is_Dark," line14="        //% block=&quot;明るい&quot;" line15="        Is_Bright" line16="    }" line17="" line18="    let deforeDirection = direction.Stop;" line19="" line20="    //% group=&quot;明るさセンサー&quot;" line21="    //% blockId=&quot;right_threshold&quot;" line22="    //% block=&quot;%rightnum より %setting&quot;" line23="    //% rightnum.min=0 rightnum.max=255" line24="    export function rightThreshold(rightnum: number, setting: dark_or_bright): boolean {" line25="        if (setting === dark_or_bright.Is_Bright) {" line26="            if (input.lightLevel() &gt; rightnum) {" line27="                return true" line28="            } else {" line29="                return false" line30="            }" line31="        } else {" line32="            if (input.lightLevel() &lt; rightnum) {" line33="                return true" line34="            } else {" line35="                return false" line36="            }" line37="        }" line38="    }" line39="    " line40="    //% group=&quot;明るさセンサー&quot;" line41="    //% blockId=&quot;is_dark&quot;" line42="    //% block=&quot;暗い&quot;" line43="    export function isDark():boolean{" line44="        if(input.lightLevel() &lt; 20){" line45="            return true" line46="        }else{" line47="            return false" line48="        }" line49="    }" line50="" line51="    //% group=&quot;明るさセンサー&quot;" line52="    //% blockId=&quot;is_bright&quot;" line53="    //% block=&quot;明るい&quot;" line54="    export function isBright(): boolean {" line55="        if (input.lightLevel() &gt;= 20) {" line56="            return true" line57="        } else {" line58="            return false" line59="        }" line60="    }" line61="" line62="    //% group=&quot;P8リレースイッチ&quot;" line63="    //% blockId=&quot;relay_on&quot;" line64="    //% block=&quot;リレースイッチ ON&quot;" line65="    export function　relayOn(){" line66="        pins.digitalWritePin(DigitalPin.P8, 1)" line67="    }" line68="" line69="    //% group=&quot;P8リレースイッチ&quot;" line70="    //% blockId=&quot;relay_off&quot;" line71="    //% block=&quot;リレースイッチ OFF&quot;" line72="    export function relayOff() {" line73="        pins.digitalWritePin(DigitalPin.P8, 0)" line74="    }" line75="" line76="    //% group=&quot;P12人感センサー&quot;" line77="    //% blockId=&quot;human_move&quot;" line78="    //% block=&quot;人が動いた&quot;" line79="    export function humanMove():boolean {" line80="        if(pins.digitalReadPin(DigitalPin.P12)==1){" line81="            return true;" line82="        }else{" line83="            return false;" line84="        }" line85="    }" line86="" line87="    //% group=&quot;P13/P14モーター制御&quot;" line88="    //% blockId=&quot;motor&quot;" line89="    //% block=&quot;モーターの強さ %power&quot;" line90="    //% power.min=-1023 power.max=1023" line91="    export function motorA(power: number) {" line92="        if (power &gt; 1023) {" line93="            power = 1023" line94="        } else if (power &lt; -1023) {" line95="            power = -1023" line96="        }" line97="" line98="        if (power &gt; 0) {" line99="            //逆電力対応" line100="            if (deforeDirection == direction.Back){" line101="                pins.analogWritePin(AnalogPin.P14, 0);" line102="                basic.pause(50)" line103="            }" line104="            pins.digitalWritePin(DigitalPin.P13, direction.Forward);" line105="            pins.analogWritePin(AnalogPin.P14, Math.abs(power));" line106="            deforeDirection = direction.Forward;" line107="        } else if (power &lt; 0) {" line108="            //逆電力対応" line109="            if (deforeDirection == direction.Forward) {" line110="                pins.analogWritePin(AnalogPin.P14, 0);" line111="                basic.pause(50)" line112="            }" line113="            pins.digitalWritePin(DigitalPin.P13, direction.Back);" line114="            pins.analogWritePin(AnalogPin.P14, Math.abs(power));" line115="            deforeDirection = direction.Back;" line116="        } else {" line117="            pins.analogWritePin(AnalogPin.P14, 0);" line118="            deforeDirection = direction.Stop;" line119="        }" line120="    }" line121="" line122="    //% group=&quot;データ計測&quot;" line123="    //% blockId=&quot;serialNameVal&quot;" line124="    //% block=&quot;データを表示 名前 %paraname 値 %value&quot;" line125="    export function serialNameVal(paraname:string,value:number):void{" line126="        serial.writeValue(paraname, value);" line127="    }" line128="}" numlines="129"></mutation></block></statement></block></xml>