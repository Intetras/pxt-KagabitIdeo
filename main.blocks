<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="?*k5ul:U?Gdin83^ia(3" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="T-aoRU=J?2-w*%p)D}Ox" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace kagabitideo {" line1="" line2="    export enum direction {" line3="        //% block=&quot;Forward&quot;" line4="        Forward = 1," line5="        //% block=&quot;Back&quot;" line6="        Back = -1," line7="        //% block=&quot;stop&quot;" line8="        Stop = 0" line9="    }" line10="" line11="    export enum dark_or_bright{" line12="        //% block=&quot;暗い&quot;" line13="        Is_Dark," line14="        //% block=&quot;明るい&quot;" line15="        Is_Bright" line16="    }" line17="" line18="    let deforeDirection = direction.Stop;" line19="    music.stopAllSounds()" line20="    //motorA(0)" line21="" line22="    //% group=&quot;明るさセンサー&quot;" line23="    //% blockId=&quot;right_threshold&quot;" line24="    //% block=&quot;%rightnum より %setting&quot;" line25="    //% rightnum.min=0 rightnum.max=255" line26="    export function rightThreshold(rightnum: number, setting: dark_or_bright): boolean {" line27="        if (setting === dark_or_bright.Is_Bright) {" line28="            if (input.lightLevel() &gt; rightnum) {" line29="                return true" line30="            } else {" line31="                return false" line32="            }" line33="        } else {" line34="            if (input.lightLevel() &lt; rightnum) {" line35="                return true" line36="            } else {" line37="                return false" line38="            }" line39="        }" line40="    }" line41="    " line42="    //% group=&quot;明るさセンサー&quot;" line43="    //% blockId=&quot;is_dark&quot;" line44="    //% block=&quot;暗い&quot;" line45="    export function isDark():boolean{" line46="        if(input.lightLevel() &lt; 20){" line47="            return true" line48="        }else{" line49="            return false" line50="        }" line51="    }" line52="" line53="    //% group=&quot;明るさセンサー&quot;" line54="    //% blockId=&quot;is_bright&quot;" line55="    //% block=&quot;明るい&quot;" line56="    export function isBright(): boolean {" line57="        if (input.lightLevel() &gt;= 20) {" line58="            return true" line59="        } else {" line60="            return false" line61="        }" line62="    }" line63="" line64="    //% group=&quot;P8リレースイッチ&quot;" line65="    //% blockId=&quot;relay_on&quot;" line66="    //% block=&quot;リレースイッチ ON&quot;" line67="    export function　relayOn(){" line68="        pins.digitalWritePin(DigitalPin.P8, 1)" line69="    }" line70="" line71="    //% group=&quot;P8リレースイッチ&quot;" line72="    //% blockId=&quot;relay_off&quot;" line73="    //% block=&quot;リレースイッチ OFF&quot;" line74="    export function relayOff() {" line75="        pins.digitalWritePin(DigitalPin.P8, 0)" line76="    }" line77="" line78="    //% group=&quot;P12人感センサー&quot;" line79="    //% blockId=&quot;human_move&quot;" line80="    //% block=&quot;人が動いた&quot;" line81="    export function humanMove():boolean {" line82="        if(pins.digitalReadPin(DigitalPin.P12)==1){" line83="            return true;" line84="        }else{" line85="            return false;" line86="        }" line87="    }" line88="" line89="    //% group=&quot;P13/P14モーター制御&quot;" line90="    //% blockId=&quot;motor&quot;" line91="    //% block=&quot;モーターの強さ %power&quot;" line92="    //% power.min=-1023 power.max=1023" line93="    export function motorA(power: number) {" line94="        if (power &gt; 1023) {" line95="            power = 1023" line96="        } else if (power &lt; -1023) {" line97="            power = -1023" line98="        }" line99="" line100="        if (power &gt; 0) {" line101="            //逆電力対応" line102="            if (deforeDirection == direction.Back){" line103="                pins.analogWritePin(AnalogPin.P14, 0);" line104="                basic.pause(50)" line105="            }" line106="            pins.digitalWritePin(DigitalPin.P13, direction.Forward);" line107="            pins.analogWritePin(AnalogPin.P14, Math.abs(power));" line108="            deforeDirection = direction.Forward;" line109="        } else if (power &lt; 0) {" line110="            //逆電力対応" line111="            if (deforeDirection == direction.Forward) {" line112="                pins.analogWritePin(AnalogPin.P14, 0);" line113="                basic.pause(50)" line114="            }" line115="            pins.digitalWritePin(DigitalPin.P13, direction.Back);" line116="            pins.analogWritePin(AnalogPin.P14, Math.abs(power));" line117="            deforeDirection = direction.Back;" line118="        } else {" line119="            pins.analogWritePin(AnalogPin.P14, 0);" line120="            deforeDirection = direction.Stop;" line121="        }" line122="    }" line123="" line124="    //% group=&quot;データ計測&quot;" line125="    //% blockId=&quot;serialNameVal&quot;" line126="    //% block=&quot;データを表示 名前 %paraname 値 %value&quot;" line127="    export function serialNameVal(paraname:string,value:number):void{" line128="        serial.writeValue(paraname, value);" line129="    }" line130="}" numlines="131"></mutation></block></statement></block></xml>